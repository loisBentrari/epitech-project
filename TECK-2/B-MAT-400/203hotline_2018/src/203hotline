#!/usr/bin/env python3

import sys
import numpy
import time
from math import factorial, exp


def Try_Int(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

def coef_binomial(n, k):
	result = factorial(n) / (factorial(k) * factorial(n - k))
	return result

def do_combi():
	if Try_Int(sys.argv[1]) == False or Try_Int(sys.argv[2]) == False:
		print("Argument must be int")
		exit(84)
	n = int(sys.argv[1])
	k = int(sys.argv[2])
	print("{}-combination of a {} set:\n{:.0f}".format(n, k, coef_binomial(n,k)))


def calcul_overload(tab):
    i = 0
    res = 0
    while i <= 25:
        res += tab[i]
        i += 1
    res = (1 - res) * 100
    return res

def compute_203(loi, k, n, p, lamb):
	tab = []
	print(loi)
	start = time.time() * 1000
	while (k <= 50):
		if k != 0:
			if (k % 6 != 0):
				print("\t", end = '')
			elif (k % 6 == 0):
				print("\n", end='')
		if lamb == 0:
			res = coef_binomial(n, k) * (p ** k) * ((1-p)**(n-k))
		else :
			res =  (lamb ** k / factorial(k)) * exp(lamb * -1)
		tab.append(res)
		print("{0} -> {1:.3f}".format(k, res), end='')
		k += 1
	print("")
	print("overload:\t{0:.1f}%".format(calcul_overload(tab)))
	end = time.time() * 1000
	print("computation time:\t{0:.2f} ms".format(end-start))
	

def do_203():
	if Try_Int(sys.argv[1]) == False:
		print("Argument must be int")
		exit(84)
	d = int(sys.argv[1])
	n = 3500
	k = 0
	p = d / 28800
	lamb = n * p
	tab = []
	compute_203("Binomial distribution:", k, n, p, 0);
	print()
	compute_203("Poisson distribution:", k, n, p, lamb);
	

if len(sys.argv) == 1:
    exit(84);
        
if sys.argv[1] == "-h":
	print("USAGE")
	print("\t./203hotline [n k | d]")
	print("DESCRIPTION")
	print("\tn\tn value for the computation of (nk)")
	print("\tk\tk value for the computation of (nk)")
	print("\td\taverage duration of calls (in seconds)")
	exit(0)

if len(sys.argv) == 3:
	do_combi()
elif len(sys.argv) == 2:
	do_203()
else:
	exit(84)
