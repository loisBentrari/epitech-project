#!/usr/bin/env python3

import sys
import numpy
import time
from math import factorial, exp, sqrt

def func(a, t):
	calc = (1/2) * exp(-4 * t) * (exp(t) - 1)**2 * (2 * (exp(t) + 1)**2 - a * (2 * exp(t) + 1))
	return calc

def mean(a):
	time = (3 * ( a + 2)) / 8
	return time


def variance(a):
	time = (7 / 16) * (3 * a + 2) - (mean(a)* mean(a))
	return sqrt(time)


def Try_Float(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

if len(sys.argv) == 1:
    exit(84)
        
if sys.argv[1] == "-h":
	print("USAGE")
	print("\t./203ducks a\n")
	print("DESCRIPTION")
	print("\ta\tconstant")
	exit(0)

def get_timer(step, a):
	t = 0
	while 1:
		if (func(a, t / 60) > step):
			time = t / 60
			mins = int(time)
			seconds = int(round((time - mins)*60, 0))
			return float(mins+(seconds/100))
		t += 0.01

def get_pourc(step, a):
	t = 0
	while 1:
		if (t > step):
			return func(a, t) * 100
		t += 0.01


if (Try_Float(sys.argv[1]) == False):
	print("Argument must be int")
	exit(84)
a = float(sys.argv[1])
if (a < 0 or a > 2.5):
	print("a is a constant between 0 and 2.5")
	exit(84)

def print_m_s(time):
	mins = int(time)
	seconds = int(round((time - mins) * 60, 0))
	print("{}m {}s".format(mins, seconds))



#time = mean(a)
#mins = int(time)
#seconds = int((time - mins) *60)
#print(seconds)
#timer_mean = float(mins+(seconds/100))
#int_part, decimal_part = str(timer_mean).split('.')
print("Average return time: ", end='')
print_m_s(mean(a))
print("Standard deviation: {:.3f}".format(variance(a)))
split_num = str(get_timer(0.5, a)).split('.')
int_part = int(split_num[0])
decimal_part = split_num[1]
print("Time after which 50% of the ducks are back: {}m {}s".format(int_part, decimal_part[:2]))
split_num = str(get_timer(0.99, a)).split('.')
int_part = int(split_num[0])
decimal_part = split_num[1]
print("Time after which 99% of the ducks are back: {}m {}s".format(int_part, decimal_part[:2]))
print("Percentage of ducks back after 1 minute: {:.1f}%".format(get_pourc(1, a)))
print("Percentage of ducks back after 2 minutes: {:.1f}%".format(get_pourc(2, a)))
