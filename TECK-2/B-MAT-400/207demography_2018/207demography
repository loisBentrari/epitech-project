#!/usr/bin/env python3

import sys
import numpy as np
import time
import csv
from math import factorial, exp, sqrt, pi

def parsing_Y(data_f, codes):
	data = []
	for row in data_f:
	    for code in codes:
	        if row[1] == code:
	            data.append(row)
	values = []
	cities = []
	for line in data:
	    count = 0
	    value = []
	    for co in line:
	        if count > 1:
	            value.append(float(co) / 1000000)
	        if count == 0:
	        	cities.append(co)
	        count += 1
	    values.append(value)
	Y = [sum(i) for i in zip(*values)]
	return (Y, cities)


def parsing_X(header):
	header.pop(0)
	header.pop(0)
	x = []
	for date in header:
		x.append(int(date))
	return x


def readFile(codes):
	count = 0
	data_f = []
	with open('207demography_data.csv', 'r') as csvFile:
	    reader = csv.reader(csvFile, delimiter=';')
	    for row in reader:
	        if count == 0:
	            header = row
	        else:
	            data_f.append(row)
	        count += 1
	csvFile.close()
	Y , cities = parsing_Y(data_f, codes) 
	return (Y, cities, parsing_X(header))

def mult_list(list1, list2):
    return [a*b for a,b in zip(list1, list2)]

def power(my_list):
    return [pow(x,2) for x in my_list]
	
def minus(my_list, moy):
    return [value - moy for value in my_list]

def Try_Int(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

def calcul_b(X,Y,N):
	return (N*sum(mult_list(X,Y)) - (sum(X)*sum(Y))) / (N*sum(power(X)) - pow(sum(X), 2))

def calcul_a(X,Y,N):
	return (sum(Y)*sum(power(X)) - sum(X)*sum(mult_list(X,Y))) / (N*sum(power(X)) - pow(sum(X), 2))

def func1(a, b ,val):
	return ((b * val) + a)

def func2(a, b, val):
	return ((val - a) / b)

def RMSE(X,Y,a,b,N, func):
	re = 0
	res = 0
	for x, y in zip(X,Y):
	    re = (func(a,b,x))
	    res += (pow(y - re, 2))
	#rmse = round((sqrt(res/N)),2)
	rmse = (sqrt(res/N))
	return (rmse)

if (len(sys.argv) < 2):
	print("check -h vor usage")
	exit(84)

if len(sys.argv) == 2 and sys.argv[1] == "-h":
	print("USAGE")
	print("\t./207demography code [...]\n")
	print("DESCRIPTION")
	print("\tcode\tcountry code")
	exit(0)


code = []

for arg in sys.argv:
	code.append(arg)
code.pop(0)

Y, cities, X = readFile(code)
for city in cities:
	print("{} ".format(city),end='')
print()

N = len(Y)
moy_X = 1/N * sum(X)
moy_Y = 1/N * sum(Y)


print("Fit1")
a_1 = calcul_a(X,Y,N)
b_1 = calcul_b(X,Y,N)
if a_1 < 0:
	sign = '-'
else:
	sign = '+'
print("\tY = {:.2f} X {} {:.2f}".format(b_1, sign, abs(a_1)))
rmse_1 = RMSE(X,Y,a_1,b_1,N, func1)
print("\tRoot-mean-square deviation: {:.2f}".format(rmse_1))
prev_2050_1 = func1(a_1,b_1, 2050)
print("\tPopulation in 2050: {:.2f}".format(prev_2050_1))

print("Fit2")
a_2 = calcul_a(Y,X,N)
b_2 = calcul_b(Y,X,N)
if a_2 < 0:
	sign = '-'
else:
	sign = '+'
print("\tX = {:.2f} Y {} {:.2f}".format(b_2, sign, abs(a_2)))
rmse_2 = RMSE(X,Y,a_2,b_2,N, func2)
print("\tRoot-mean-square deviation: {:.2f}".format(rmse_2))
prev_2050_2 = func2(a_2,b_2, 2050)
print("\tPopulation in 2050: {:.2f}".format(prev_2050_2))

t = np.corrcoef(np.array(X), np.array(Y))[1,0]
print("Correlation: {:.4f}".format(round(t, 4)))